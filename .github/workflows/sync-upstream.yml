name: Sync Fork with Upstream Repository

# 触发条件配置
on:
  schedule:
    # 每天UTC时间午夜（北京时间上午8点）运行一次，你可以调整
    - cron: '0 0 * * *'
  workflow_dispatch: # 允许手动触发
  push:
    branches:
      - main
      - master
    # 忽略包含"[skip sync]"消息的提交，避免同步循环
    paths-ignore:
      - '**.md'
      - '.github/**'

# 工作流处理逻辑
jobs:
  sync-upstream:
    name: Sync Upstream Changes
    runs-on: ubuntu-latest
    
    steps:
      # 步骤1: 检出你的仓库代码
      - name: Checkout Fork Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0 # 获取所有历史记录，这对正确同步很重要

      # 步骤2: 配置Git身份
      - name: Setup Git Identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # 步骤3: 添加上游仓库地址
      - name: Add Upstream Remote
        run: |
          git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git
        env:
          ORIGINAL_OWNER: "anzhiyu-c" # 替换为上游仓库所有者
          ORIGINAL_REPOSITORY: "anheyu-app-frontend" # 替换为上游仓库名

      # 步骤4: 获取上游仓库的更新
      - name: Fetch Upstream Changes
        run: git fetch upstream

      # 步骤5: 合并上游仓库的更改（假设使用main分支）
      - name: Merge Upstream Changes
        run: |
          git checkout main # 或你的默认分支，如master
          git merge upstream/main --no-edit --no-ff
          # 使用--no-edit自动接受默认合并消息
          # 使用--no-ff创建合并提交即使可以快进

      # 步骤6: 推送更新到你的fork仓库
      - name: Push Changes to Fork
        run: git push origin main
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

      # 步骤7: 可选 - 处理标签同步
      - name: Sync Tags
        run: |
          git push origin --tags
